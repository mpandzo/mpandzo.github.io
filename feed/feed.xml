<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Mirza Pandzo</title>
	<subtitle>I enjoy writing about my experiences as a software developer.</subtitle>
	
	<link href="https://mirzapandzo.com/feed/feed.xml" rel="self"/>
	<link href="https://mirzapandzo.com/"/>
	<updated>2022-10-23T00:00:00Z</updated>
	<id>https://mirzapandzo.com/</id>
	<author>
		<name>Mirza Pandzo</name>
		<email></email>
	</author>
	
	<entry>
		<title>The tailwind dilemma</title>
		<link href="https://mirzapandzo.com/posts/the-tailwind-dilemma/"/>
		<updated>2022-10-23T00:00:00Z</updated>
		<id>https://mirzapandzo.com/posts/the-tailwind-dilemma/</id>
		<content type="html">&lt;p&gt;TailwindCSS is an interesting piece of software. It seems to mainly elicit two types of reaction. People either love it and use it every day or they really hate it. There is no sitting on the fence.&lt;/p&gt;
&lt;h2 id=&quot;why-is-that&quot; tabindex=&quot;-1&quot;&gt;Why is that? &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#why-is-that&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you Google &amp;quot;I hate TailwindCSS&amp;quot; or &amp;quot;I love TailwindCSS&amp;quot; you&#39;ll find a myraid of lists of cons and pros, rants and eulogies - you&#39;ll read for hours. I won&#39;t bother trying to summarise the results, and even if I tried, I wouldn&#39;t do them justice.&lt;/p&gt;
&lt;p&gt;I will say this however, I believe the answer to the question above is in the framework&#39;s description piece found on the landing page above the fold:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A utility-first CSS framework packed with classes like flex, pt-4, text-center
and rotate-90 that can be composed to build any design, directly in your markup.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;Utility-first... in your markup&amp;quot;.&lt;/p&gt;
&lt;p&gt;TailwindCSS provides an idea of abstraction over CSS that some people love passionately and others really hate.&lt;/p&gt;
&lt;p&gt;But hang on a second, you&#39;ll say, that&#39;s what CSS classes do - abstract CSS rules - TailwindCSS did not invent CSS classes!&lt;/p&gt;
&lt;p&gt;And you would be right. TailwindCSS didn&#39;t invent CSS classes. What it does is champion the idea of abstracting away CSS rules without enforcing opinionated design decisions the way other &amp;quot;real&amp;quot; CSS frameworks do. It also does not enforce compartmentalisation the way &lt;a href=&quot;https://maintainablecss.com/chapters/semantics/&quot;&gt;semantic CSS&lt;/a&gt; does.&lt;/p&gt;
&lt;p&gt;Think about it, it&#39;s quite revolutionary.&lt;/p&gt;
&lt;p&gt;I&#39;d still like to touch on a few points with the above in mind.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-it&quot; tabindex=&quot;-1&quot;&gt;When to use it? &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#when-to-use-it&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Prototypes are a given. The time it takes to &#39;npm install&#39;, set some rules in tailwind config and start working (on something meaningful) is so short it&#39;s simply not up for debate. Tailwind beats everything hands down.&lt;/p&gt;
&lt;p&gt;It is in complex projects however that TailwindCSS really shines.&lt;/p&gt;
&lt;h3 id=&quot;skip-the-boring-stuff&quot; tabindex=&quot;-1&quot;&gt;Skip the boring stuff &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#skip-the-boring-stuff&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is no need to ever write custom CSS to convert the most complex designs into HTML. Being able to skip writing raw CSS speeds up the development process tremendously!&lt;/p&gt;
&lt;p&gt;In addition, not having to constantly weigh up the best or most in fashion naming convention (BEM, ABEM, SMACSS etc) is a God send.&lt;/p&gt;
&lt;h3 id=&quot;but-what-about-maintenance&quot; tabindex=&quot;-1&quot;&gt;But what about maintenance? &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#but-what-about-maintenance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Any developer worth their salt writing code in 2022 will use some form of component design (atomic, modular, whatever) to compose their application. As such, changing an element&#39;s CSS rules sitewide requires changing the CSS classes of only that one element.&lt;/p&gt;
&lt;p&gt;Now, think about a large application with hundreds of components written over a long period of time. The code will most likely have been written by different developers of different skill level each administering their own flavour of BEM or SMACSS. With TailwindCSS there is no such problem.&lt;/p&gt;
&lt;h3 id=&quot;there-is-code-bloat&quot; tabindex=&quot;-1&quot;&gt;There is code bloat &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#there-is-code-bloat&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a class=&amp;quot;inline-block px-4 py-3
    text-sm font-semibold text-center
    text-white uppercase transition
    duration-200 ease-in-out bg-indigo-600
    rounded-md cursor-pointer
    hover:bg-indigo-700&amp;quot;&amp;gt;Button&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;vs&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;a class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;Button&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, the latter is easier on the eyes than the former.&lt;/p&gt;
&lt;p&gt;However, firstly, when abstracted in a component, the code bloat does not make much difference to every day development. And secondly, if you really, really want to, you can use Tailwind&#39;s &lt;a href=&quot;https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply&quot;&gt;@apply&lt;/a&gt; feature to group sets of classes together to achieve the latter - though it&#39;s philosophically discouraged.&lt;/p&gt;
&lt;p&gt;Lastly, with the advent of http2 and faster broadly adopted web speeds, inlining a bunch of CSS classes will not affect website performance. Tailwinds performance-focused setup leads to notoriously small CSS files, even for &lt;a href=&quot;https://tailwindcss.com/docs/optimizing-for-production&quot;&gt;large websites&lt;/a&gt; (&amp;gt;10kb).&lt;/p&gt;
&lt;h2 id=&quot;competion-does-it-better&quot; tabindex=&quot;-1&quot;&gt;Competion does it better? &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#competion-does-it-better&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I disagree strongly. Bootstrap, Foundation and Bulma (to name a few) are not TailwindCSS&#39;s competition. They are opinionated CSS frameworks on par with DiasyUI (an opinionated CSS framework built on top of TailwindCSS).&lt;/p&gt;
&lt;p&gt;Bootstrap provides &lt;a href=&quot;https://getbootstrap.com/docs/4.0/utilities/borders/&quot;&gt;utility classes&lt;/a&gt; which you could probably use on their for a utility-first development experience, however, their classes are more bloated thank Tailwind&#39;s (.d-flex vs Tailwind&#39;s .flex etc). It almost feels like these utility classes are an afterthought to Tailwind&#39;s success.&lt;/p&gt;
&lt;p&gt;You will simply not find a better utility-first CSS framework.&lt;/p&gt;
&lt;h2 id=&quot;wrapping-things-up&quot; tabindex=&quot;-1&quot;&gt;Wrapping things up &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/the-tailwind-dilemma/#wrapping-things-up&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Finally, I strongly encourage you to try using TailwindCSS on one of your projects. I understand you may be reluctant. Coming from a Semantic CSS development background myself it was very hard to make a conscious decision to switch to utility-first instead. Having done development with TailwindCSS for the past 2 years I can say I cannot imagine doing anything else.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The power of laziness</title>
		<link href="https://mirzapandzo.com/posts/the-power-of-laziness/"/>
		<updated>2022-07-26T00:00:00Z</updated>
		<id>https://mirzapandzo.com/posts/the-power-of-laziness/</id>
		<content type="html">&lt;p&gt;I hate repetitive work. Read, copy, paste, edit, repeat. It&#39;s horribly monotonous and I always make a mistake that I have to go back and fix.&lt;/p&gt;
&lt;p&gt;As a friend of mine quipped once, perhaps humans invent stuff out of laziness? Some lazy bastard didn&#39;t want to walk so they invented the wheel. What&#39;s the remote control if not the quintessence of laziness - it&#39;s there because someone couldn&#39;t be bothered to get up and change the channel. The same goes for escalators, cars, telephones etc.&lt;/p&gt;
&lt;p&gt;All jesting aside, laziness of this kind is not for a lack of energy or care, it&#39;s about wanting to find easier, more efficient ways to accomplish something. And the art of programming is all about this exact practice. Finding solutions that will make the computer do the grunt work for you.&lt;/p&gt;
&lt;p&gt;I recently needed to convert an array of strings into an array of JSON objects. Along the way, I also needed to slugify the string and get rid of accents/diacritics - you know, convert letters like í,á,ü into i,a,u.&lt;/p&gt;
&lt;p&gt;My original array looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const teamsLaLiga = [
  &amp;quot;Almería&amp;quot;,
  &amp;quot;Athletic Bilbao&amp;quot;,
  &amp;quot;Atlético Madrid&amp;quot;,
  &amp;quot;Barcelona&amp;quot;,
  &amp;quot;Cádiz&amp;quot;,
  &amp;quot;Celta Vigo&amp;quot;,
  &amp;quot;Elche&amp;quot;,
  &amp;quot;Espanyol&amp;quot;,
  &amp;quot;Getafe&amp;quot;,
  &amp;quot;Girona&amp;quot;,
  &amp;quot;Mallorca&amp;quot;,
  &amp;quot;Osasuna&amp;quot;,
  &amp;quot;Rayo Vallecano&amp;quot;,
  &amp;quot;Real Betis&amp;quot;,
  &amp;quot;Real Madrid&amp;quot;,
  &amp;quot;Real Sociedad&amp;quot;,
  &amp;quot;Sevilla&amp;quot;,
  &amp;quot;Valencia&amp;quot;,
  &amp;quot;Valladolid&amp;quot;,
  &amp;quot;Villarreal&amp;quot;,
];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice the &lt;code&gt;á&lt;/code&gt; and &lt;code&gt;é&lt;/code&gt; in Cádiz and Atlético Madrid.&lt;/p&gt;
&lt;p&gt;I wanted to achieve JSON in the form of:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const jsonTeams = [
  ...
  {
    name: &#39;Atletico Madrid&#39;,
    displayName: &#39;Atlético Madrid&#39;,
    slug: &#39;atletico-madrid&#39;
    league: &#39;la-liga&#39;,
  },
  ...
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, sure, this was a fairly small array, and I could have done the work manually, however, I wanted to do the same with Turkish Süper Lig team names like &amp;quot;Fatih Karagümrük&amp;quot; and &amp;quot;İstanbul Başakşehir&amp;quot;, and Portuguese Primeira liga team names like &amp;quot;Marítimo&amp;quot; and &amp;quot;Paços de Ferreira&amp;quot;. There&#39;d be a lot of manual work involved.&lt;/p&gt;
&lt;p&gt;So, instead of manually copying, pasting and editing things for an hour, I quickly wrote a script to do the work for me. To get rid of accents/diacritics I used the lodash library&#39;s &lt;a rel=&quot;bookmark nofollow&quot; href=&quot;https://docs-lodash.com/v4/deburr/&quot;&gt;deburr&lt;/a&gt; method. To slugify titles I used the &lt;a rel=&quot;bookmark nofollow&quot; href=&quot;https://www.npmjs.com/package/slugify&quot;&gt;slugify&lt;/a&gt; library. Both were added to my simple script as script references via &lt;a rel=&quot;bookmark nofollow&quot; href=&quot;https://cdn.jsdelivr.net/&quot;&gt;cdn.jsdelivr.net&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The html to achieve this looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/slugify@1.6.5/slugify.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/lodash.deburr@4.1.0/index.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;script&amp;gt;
  (() =&amp;gt; {
    const teamsLaLiga = [
      &amp;quot;Almería&amp;quot;,
      &amp;quot;Athletic Bilbao&amp;quot;,
      &amp;quot;Atlético Madrid&amp;quot;,
      &amp;quot;Barcelona&amp;quot;,
      &amp;quot;Cádiz&amp;quot;,
      &amp;quot;Celta Vigo&amp;quot;,
      &amp;quot;Elche&amp;quot;,
      &amp;quot;Espanyol&amp;quot;,
      &amp;quot;Getafe&amp;quot;,
      &amp;quot;Girona&amp;quot;,
      &amp;quot;Mallorca&amp;quot;,
      &amp;quot;Osasuna&amp;quot;,
      &amp;quot;Rayo Vallecano&amp;quot;,
      &amp;quot;Real Betis&amp;quot;,
      &amp;quot;Real Madrid&amp;quot;,
      &amp;quot;Real Sociedad&amp;quot;,
      &amp;quot;Sevilla&amp;quot;,
      &amp;quot;Valencia&amp;quot;,
      &amp;quot;Valladolid&amp;quot;,
      &amp;quot;Villarreal&amp;quot;,
    ];

    const jsonTeams = [];
    teamsLaLiga.forEach((teamName) =&amp;gt; {
      jsonTeams.push({
        name: deburr(teamName),
        slug: slugify(teamName, { lower: true, remove: /[*+~.()&#39;&amp;quot;!:@]/g }),
        displayName: teamName,
        league: &amp;quot;la-liga&amp;quot;
      });
    });

    console.log(jsonTeams);
  })();
  &amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: the call to &lt;code&gt;slugify(teamName, { lower: true, remove: /[*+~.()&#39;&amp;quot;!:@]/g })&lt;/code&gt; includes the remove option that takes a Regex expression to get rid of characters &#39;*+~.()&#39;&amp;quot;!:@&#39; when creating the slugs.&lt;/p&gt;
&lt;p&gt;The script above resulted in a JSON array formatted exactly as I wanted it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[{
  displayName: &amp;quot;Almería&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Almeria&amp;quot;,
  slug: &amp;quot;almeria&amp;quot;
}, {
  displayName: &amp;quot;Athletic Bilbao&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Athletic Bilbao&amp;quot;,
  slug: &amp;quot;athletic-bilbao&amp;quot;
}, {
  displayName: &amp;quot;Atlético Madrid&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Atletico Madrid&amp;quot;,
  slug: &amp;quot;atletico-madrid&amp;quot;
}, {
  displayName: &amp;quot;Barcelona&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Barcelona&amp;quot;,
  slug: &amp;quot;barcelona&amp;quot;
}, {
  displayName: &amp;quot;Cádiz&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Cadiz&amp;quot;,
  slug: &amp;quot;cadiz&amp;quot;
}, {
  displayName: &amp;quot;Celta Vigo&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Celta Vigo&amp;quot;,
  slug: &amp;quot;celta-vigo&amp;quot;
}, {
  displayName: &amp;quot;Elche&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Elche&amp;quot;,
  slug: &amp;quot;elche&amp;quot;
}, {
  displayName: &amp;quot;Espanyol&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Espanyol&amp;quot;,
  slug: &amp;quot;espanyol&amp;quot;
}, {
  displayName: &amp;quot;Getafe&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Getafe&amp;quot;,
  slug: &amp;quot;getafe&amp;quot;
}, {
  displayName: &amp;quot;Girona&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Girona&amp;quot;,
  slug: &amp;quot;girona&amp;quot;
}, {
  displayName: &amp;quot;Mallorca&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Mallorca&amp;quot;,
  slug: &amp;quot;mallorca&amp;quot;
}, {
  displayName: &amp;quot;Osasuna&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Osasuna&amp;quot;,
  slug: &amp;quot;osasuna&amp;quot;
}, {
  displayName: &amp;quot;Rayo Vallecano&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Rayo Vallecano&amp;quot;,
  slug: &amp;quot;rayo-vallecano&amp;quot;
}, {
  displayName: &amp;quot;Real Betis&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Real Betis&amp;quot;,
  slug: &amp;quot;real-betis&amp;quot;
}, {
  displayName: &amp;quot;Real Madrid&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Real Madrid&amp;quot;,
  slug: &amp;quot;real-madrid&amp;quot;
}, {
  displayName: &amp;quot;Real Sociedad&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Real Sociedad&amp;quot;,
  slug: &amp;quot;real-sociedad&amp;quot;
}, {
  displayName: &amp;quot;Sevilla&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Sevilla&amp;quot;,
  slug: &amp;quot;sevilla&amp;quot;
}, {
  displayName: &amp;quot;Valencia&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Valencia&amp;quot;,
  slug: &amp;quot;valencia&amp;quot;
}, {
  displayName: &amp;quot;Valladolid&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Valladolid&amp;quot;,
  slug: &amp;quot;valladolid&amp;quot;
}, {
  displayName: &amp;quot;Villarreal&amp;quot;,
  league: &amp;quot;la-liga&amp;quot;,
  name: &amp;quot;Villarreal&amp;quot;,
  slug: &amp;quot;villarreal&amp;quot;
}]
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>SST - Cannot use GraphQLScalarType &quot;Boolean&quot; from another module or realm</title>
		<link href="https://mirzapandzo.com/posts/sst-cannot-use-graphqlscalartype-boolean-from-another-module-or-realm/"/>
		<updated>2022-07-24T00:00:00Z</updated>
		<id>https://mirzapandzo.com/posts/sst-cannot-use-graphqlscalartype-boolean-from-another-module-or-realm/</id>
		<content type="html">&lt;p&gt;I&#39;ve been playing around with &lt;a href=&quot;https://sst.dev/&quot;&gt;SST&lt;/a&gt; over the last few days. SST is a &amp;quot;framework that makes it easy to build serverless apps&amp;quot;. It builds on top of the AWS CDK (Amazon&#39;s cloud development kit) and comes with a set of impressive features including a live lambda dev environment, a management dashboard, debugging with breakpoints in VS Code as well as out-of-the-box support for JS and TS (using esbuild), Go, Python, C#, and F#.&lt;/p&gt;
&lt;p&gt;SST is infrastructure-as-code on steroids. It comes with higher-level constructs designed specifically for serverless apps resulting in code that looks mighty impressive:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import * as sst from &#39;@serverless-stack/resources&#39;;

import { StorageStack } from &#39;./StorageStack&#39;;
import { ApiStack } from &#39;./ApiStack&#39;;
import { AuthStack } from &#39;./AuthStack&#39;;
import { WebStack } from &#39;./WebStack&#39;;
import { CronStack } from &#39;./CronStack&#39;;

export default function main(app: sst.App): void {
  // Set default runtime for all functions
  app.setDefaultFunctionProps({
    runtime: &#39;nodejs16.x&#39;,
    srcPath: &#39;services&#39;,
    bundle: {
      format: &#39;esm&#39;,
    },
  });

  app
    .stack(StorageStack).stack(ApiStack).stack(AuthStack).stack(CronStack).stack(WebStack);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;cannot-use-graphqlscalartype-&amp;quot;boolean&amp;quot;-from-another-module-or-realm.&quot; tabindex=&quot;-1&quot;&gt;Cannot use GraphQLScalarType &amp;quot;Boolean&amp;quot; from another module or realm. &lt;a class=&quot;direct-link&quot; href=&quot;https://mirzapandzo.com/posts/sst-cannot-use-graphqlscalartype-boolean-from-another-module-or-realm/#cannot-use-graphqlscalartype-%22boolean%22-from-another-module-or-realm.&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;But I digress. While learning and ins-and-outs of the framework (I am nowhere near done), I used the &lt;code&gt;create sst&lt;/code&gt; command to set up an app and followed the SST guide to add different stack constructs. I chose Vue.js for my web stack and managed to query the GraphQL endpoint without issue. I was playing with the Cron construct when I suddenly noticed the following error in my console:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Failed to extract schema from pothos
Error: Cannot use GraphQLScalarType &amp;quot;Boolean&amp;quot; from another module or realm.

Ensure that there is only one instance of &amp;quot;graphql&amp;quot; in the node_modules
directory. If different versions of &amp;quot;graphql&amp;quot; are the dependencies of other
relied on modules, use &amp;quot;resolutions&amp;quot; to ensure only one version is installed.

https://yarnpkg.com/en/docs/selective-version-resolutions

Duplicate &amp;quot;graphql&amp;quot; modules cannot be used at the same time since different
versions may have different capabilities and behavior. The data from one
version used in the function from another could produce confusing and
spurious results.
    at instanceOf (/Users/mirzapandzo/Projects/nonstopfootball/node_modules/graphql/jsutils/instanceOf.js:44:19)
    at isScalarType (/Users/mirzapandzo/Projects/nonstopfootball/node_modules/graphql/type/definition.js:117:37)
    at sortNamedType (/Users/mirzapandzo/Projects/nonstopfootball/node_modules/graphql/utilities/lexicographicSortSchema.js:99:36)
    at keyValMap (/Users/mirzapandzo/Projects/nonstopfootball/node_modules/graphql/jsutils/keyValMap.js:29:27)
    at lexicographicSortSchema (/Users/mirzapandzo/Projects/nonstopfootball/node_modules/graphql/utilities/lexicographicSortSchema.js:31:44)
    at Module.generate (file:///Users/mirzapandzo/Projects/nonstopfootball/node_modules/@serverless-stack/core/dist/pothos/generate.js:149:40)
    at build (file:///Users/mirzapandzo/Projects/nonstopfootball/node_modules/@serverless-stack/core/dist/cli/PothosBuilder.js:12:28)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I tried to revert code, Command+Z etc, but no luck. I was commenting things left, right and center but the error would not go away.&lt;/p&gt;
&lt;p&gt;Dax from the [SST discord] (&lt;a href=&quot;https://discord.com/channels/983865673656705025/985224097342582865/997233904698277898&quot;&gt;https://discord.com/channels/983865673656705025/985224097342582865/997233904698277898&lt;/a&gt;) mentioned this might be a node_modules conflict when asked about the issue a few days ago, however, I was intrigued why this problem was suddenly occurring for me when I was able to run GraphQL without issue only a few moments ago.&lt;/p&gt;
&lt;p&gt;Then it struck me! SST is configured with workspaces to hoist modules into the root node_modules folder. I had used yarn to install sst initially, but, while playing around with the Cron construct I went and used npm to install rss-parser (force of habit). As a result, this mixing of yarn and npm commands caused a conflict within my node_modules resulting in the above errors&lt;/p&gt;
&lt;p&gt;To fix the issue, I removed all node_modules folders with &lt;code&gt;rm -Rf node_modules&lt;/code&gt; and used yarn to install. I was able to continue working and the conflict was resolved.&lt;/p&gt;
&lt;p&gt;Note: If this fix does not work for you, you may have to resort to adding a resolutions section to your graphql folder&#39;s package.json file as follows to force the use of the correct graphql library.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;resolutions&amp;quot;: {
  &amp;quot;graphql&amp;quot;: &amp;quot;16.5.0&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
</feed>
